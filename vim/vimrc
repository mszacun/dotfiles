set t_Co=256 " 256 colors
" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
filetype off
set backspace=2         " make backspace working
" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
" configure tabwidth and insert spaces instead of tabs
set tabstop=4        " tab width is 4 spaces
set shiftwidth=4     " indent also with 4 spaces
set expandtab        " expand tabs to spaces
set wrap
set ruler               " show the line number on the bar
set colorcolumn=120     " color column
" turn syntax highlighting on
syntax on
" search settings
set hlsearch
set incsearch
set ignorecase " ignore case when searching...
set smartcase " but change it when at lease on uppercase letter is given
" turn line numbers on
set relativenumber      " relative line numbering to simplyfy moving
set number              " normal line number
set showmatch           " show matching brackets
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */
" split settings
set splitbelow
set splitright
" show all possible matches when using autocomplete in command-lie
set wildmenu

" The /g flag on :s substitutions by default
set gdefault

set clipboard+=unnamed " enable clipboard register support

"options for GUI - remove all :)
set go-=m "remove menu bar
set go-=T "remove toolbar
set go-=r "remove right scroll bar
set go-=L "remove left scroll bar

let g:netrw_bufsettings = "noma nomod nonu nobl nowrap ro nornu nohls"

set nobackup            " disable backup files
set noswapfile          " disable swap files

"so types.vim            " try to highlight user defined types

autocmd FileType Makefile expandtab off "tabs in Makefile

set autoread
set nobackup
set nowb
set undofile
set undodir=$HOME/.vim/undodir

set path=.,$WORKSPACE/src/backlog/static/,$WORKSPACE/src/backlog/templates/,$WORKSPACE

" status bar stuff
set laststatus=2        " show status line all the time
let g:airline_theme = "base16"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" silver_searcher as default grep
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

function! GetRepoRoot()
    return systemlist('dirname $(git rev-parse --git-dir 2>/dev/null)')[0]
endfun

function! GrepInNewTab(needle, haystack, additinalAgArgs)
    let regexp = "\"\\b" . a:needle . "\\b\""
    let agArgs = "--case-sensitive " . a:additinalAgArgs
    execute ":tabnew"
    execute ":grep -R " . regexp . " " . a:haystack . " " . agArgs
    execute ":copen"
    norm [Q
endfun

nmap <leader>g <leader>G<CR>
nmap <leader>G :call GrepInNewTab("<C-r><C-w>", "<C-r>=GetRepoRoot()<CR>", "")

" move cursor by display line
nnoremap j gj
nnoremap k gk

" watch out for SHIFT key
:command Q q
:command W w
:command QA qall
:command Qa qall
:command Xa xall
:command XA xall

" shortcuts for system clipboard
nnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>y "+y
vnoremap <leader>p "+p


" backspace removes highlight after search
nnoremap <Enter> :noh<CR>
autocmd FileType qf nnoremap <buffer> <Enter> <Enter>

function IAmPro()
    " disable arrow keys in Normal mode
    map <up> <nop>
    map <down> <nop>
    map <left> :bprev<CR>
    map <right> :bnext<CR>

    " disable arrow keys in Insert mode
    imap <up> <nop>
    imap <down> <nop>
    imap <left> <nop>
    imap <right> <nop>
endfun

function! IAmNoob()
    map <up> <up>
    map <down> <down>
    map <left> <left>
    map <right> <right>

    " disable arrow keys in Insert mode
    imap <up> <up>
    imap <down> <down>
    imap <left> <left>
    imap <right> <right>
endfun

call IAmNoob() " I am pro by default

command IAmNoob call IAmNoob()
command IAmPro call IAmPro()

" folding
set foldmethod=indent   
set foldnestmax=10
set nofoldenable
set foldlevel=2
" my snippets
set runtimepath +=~/aginoodle/

" Use perl compiler for all *.pl and *.pm files.
autocmd BufNewFile,BufRead *.p? compiler perl

" remove trailing whitspaes on file save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,javascript,html,tex,css,htmldjango,typescript,vue autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
au BufReadPost *.tex setlocal spell spelllang=pl

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-abolish'
Plugin 'moll/vim-bbye'
Plugin 'neomake/neomake'
Plugin 'rhysd/devdocs.vim'
Plugin 'vim-scripts/turbo.vim'

Plugin 'posva/vim-vue'
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css

:nnoremap <Leader>k :DevDocsAll 
:nnoremap <Leader>K :DevDocsAllUnderCursor

" keyboard shortcut to close buffer, but preserve window layout
:nnoremap <Leader>Q :Bdelete<CR>
:nnoremap <Leader>q :bd<CR>

:nnoremap <Leader>b :!tig blame %<CR>

:tnoremap <Esc> <C-W>N

" ignored directories 
set wildignore+=*/eggs/*,*/backups/*,*/bin/*,*/bootstrap.py/*,*/build/*,*/buildout.cfg/*,*/develop-eggs/*,*/parts/*,*/logs/*,*/docs/*,*/src/backlog.egg-info/*,*/collected-statics/*,*.pyc
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

Bundle 'tomtom/tcomment_vim'
Bundle 'vim-scripts/ZoomWin'
Plugin 'chriskempson/base16-vim'
Bundle 'wellle/targets.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'bonsaiben/bootstrap-snippets'
Plugin 'vim-scripts/LargeFile'


" tmux integration
Plugin 'christoomey/vim-tmux-navigator'
tnoremap <silent> <c-h> <C-W>N:TmuxNavigateLeft<cr>
tnoremap <silent> <c-j> <C-W>N:TmuxNavigateDown<cr>
tnoremap <silent> <c-k> <C-W>N:TmuxNavigateUp<cr>
tnoremap <silent> <c-l> <C-W>N:TmuxNavigateRight<cr>
tnoremap <silent> <c-\> <C-W>N:TmuxNavigatePrevious<cr>

" snipmate
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"

" user snippet repository
Bundle "honza/vim-snippets"

call vundle#end()            " required
filetype plugin indent on    " required

" colorscheme settings
let base16colorspace=256
colorscheme base16-default-dark
set background=dark

" ctrlp tag fuzzy search
nnoremap <C-t> :CtrlPTag<CR>

" aginoodle test running
let g:RunTestCommand = 't'

nmap <leader>a :cd $WORKSPACE<CR>

function! RunTest(extra_args)
    execute 'wa'
    let l:winview = winsaveview()
    execute '?def test'
    normal w
    let command = g:RunTestCommand . ' ' . expand('%') . ' -k ' . expand('<cword>') . ' ' . a:extra_args
    call winrestview(l:winview)
    execute 'nohlsearch'
    execute RunCommand(command)
    call winrestview(l:winview)
endfunction

function! RunTestFile(extra_args)
    execute RunCommand(g:RunTestCommand . ' ' . expand('%') . ' ' . a:extra_args)
endfunction

function! RunCommand(command)
    execute 'wa'
    normal m'
    let executed = 'zsh -ic "' . a:command . '"'
    execute 'terminal ' . l:executed
endfunction

command -nargs=* SingleTest call RunTest(<q-args>)
command -nargs=* FileTest call RunTestFile(<q-args>)

map <leader>T :FileTest --xvfb<CR>
map <leader>t :SingleTest<CR>
nmap <leader>u 120\|F,a<CR><ESC>

command MT terminal zsh -ic mt

call neomake#configure#automake('rw')
let g:neomake_place_signs = 0
let g:neomake_python_enabled_makers = ['agipylint']
let g:neomake_enabled_makers = ['agipylintglobal']
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_enabled_makers = ['agieslintglobal']
let g:neomake_python_agipylint_maker = {
        \ 'args': [
            \ '--output-format=text',
            \ '--msg-template="{path}:{line}:{column}:{C}: [{symbol}] {msg} [{msg_id}]"',
            \ '--reports=no'
        \ ],
        \ 'exe': $WORKSPACE . '/bin/pylint-run',
        \ 'errorformat':
            \ '%A%f:%l:%c:%t: %m,' .
            \ '%A%f:%l: %m,' .
            \ '%A%f:(%l): %m,' .
            \ '%-Z%p^%.%#,' .
            \ '%-G%.%#',
        \ 'output_stream': 'stdout',
        \ 'postprocess': [
        \   function('neomake#postprocess#GenericLengthPostprocess'),
        \   function('neomake#makers#ft#python#PylintEntryProcess'),
        \ ]}

let g:neomake_agipylintglobal_maker = {
        \ 'args': [
            \ '--output-format=text',
            \ '--msg-template="{path}:{line}:{column}:{C}: [{symbol}] {msg} [{msg_id}]"',
            \ '--reports=no',
            \ $WORKSPACE . '/src/backlog/'
        \ ],
        \ 'exe': $WORKSPACE . '/bin/pylint-run',
        \ 'errorformat':
            \ '%A%f:%l:%c:%t: %m,' .
            \ '%A%f:%l: %m,' .
            \ '%A%f:(%l): %m,' .
            \ '%-Z%p^%.%#,' .
            \ '%-G%.%#',
        \ 'output_stream': 'stdout',
        \ 'postprocess': [
        \   function('neomake#postprocess#GenericLengthPostprocess'),
        \   function('neomake#makers#ft#python#PylintEntryProcess'),
        \ ]}
let g:neomake_agieslintglobal_maker = {
        \ 'exe': 'eslint',
        \ 'args': ['-f', 'compact', $WORKSPACE . 'src/backlog/static'],
        \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
        \   '%W%f: line %l\, col %c\, Warning - %m,%-G,%-G%*\d problems%#'
        \ }


function! Mixedcase(word)
  return substitute(Camelcase(a:word),'^.','\u&','')
endfunction

function! Camelcase(word)
  let word = substitute(a:word, '-', '_', 'g')
  if word !~# '_' && word =~# '\l'
    return substitute(word,'^.','\l&','')
  else
    return substitute(word,'\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g')
  endif
endfunction
