set t_Co=256 " 256 colors
" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibility (emulation of old bugs)
set nocompatible
filetype off
set backspace=2         " make backspace working
" use indentation of previous line
set autoindent
" use intelligent indentation for C
set smartindent
" configure tabwidth and insert spaces instead of tabs
set tabstop=4        " tab width is 4 spaces
set shiftwidth=4     " indent also with 4 spaces
set expandtab        " expand tabs to spaces
set wrap
set ruler               " show the line number on the bar
set colorcolumn=120     " color column
" turn syntax highlighting on
syntax on
" search settings
set hlsearch
set incsearch
set ignorecase " ignore case when searching...
set smartcase " but change it when at lease on uppercase letter is given
" turn line numbers on
set number              " normal line number
set showmatch           " show matching brackets
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */
" split settings
set splitbelow
set splitright
" show all possible matches when using autocomplete in command-lie
set wildmenu

" The /g flag on :s substitutions by default
set gdefault

set clipboard+=unnamed " enable clipboard register support

set completeopt+=fuzzy,menuone,noinsert

"options for GUI - remove all :)
set go-=m "remove menu bar
set go-=T "remove toolbar
set go-=r "remove right scroll bar
set go-=L "remove left scroll bar

let g:netrw_bufsettings = "noma nomod nonu nobl nowrap ro nornu nohls"

set nobackup            " disable backup files
set noswapfile          " disable swap files

"so types.vim            " try to highlight user defined types

autocmd FileType Makefile expandtab off "tabs in Makefile

set autoread
set nobackup
set nowb
set undofile
set undodir=$HOME/.vim/undodir

set path=.,$WORKSPACE/src/backlog/static/,$WORKSPACE/src/backlog/templates/,$WORKSPACE

" status bar stuff
set laststatus=2        " show status line all the time
let g:airline_theme = "base16"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" silver_searcher as default grep
set grepprg=rg\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

function! GetRepoRoot()
    return systemlist('dirname $(git rev-parse --git-dir 2>/dev/null)')[0]
endfun

function! GrepInNewTab(...)
    let needleWithAdditionalAgArgs = join(a:000, " ")
    execute ":tabnew"
    execute ":grep " . needleWithAdditionalAgArgs . " " . GetRepoRoot()
    execute ":copen"
    norm [Q
endfun

command! -nargs=* -range Grep :call GrepInNewTab(<f-args>)

"nmap <leader>g :call GrepInNewTab("<C-r><C-w>", "-w")<CR>
nnoremap <leader>gg :Rg <C-r><C-w><CR>

" New operator mapping that works with text objects
nnoremap <expr> <leader>g ':<C-u>Rg ' . escape(GetSelectedText(), ' ') . '<CR>'
vnoremap <leader>g :<C-u>Rg <C-r>=escape(@", ' ')<CR><CR>

" Function to get text from operator+motion or text object
function! GetSelectedText()
  let save_reg = @@
  normal! `[v`]y
  let selected_text = @@
  let @@ = save_reg
  return selected_text
endfunction

" Define operator for use with text objects
nnoremap <leader>g :set opfunc=SearchOperator<CR>g@
function! SearchOperator(type)
  let save_reg = @@
  if a:type ==# 'char'
    normal! `[v`]y
  elseif a:type ==# 'line'
    normal! '[V']y
  else
    normal! `<v`>y
  endif
  let selected_text = @@
  execute 'Rg ' . escape(selected_text, ' ')
  let @@ = save_reg
endfunction

nnoremap <silent> <Leader>c :set opfunc=PassToLLM<CR>g@
vnoremap <silent> <Leader>c :<C-U>call PassToLLM(visualmode(), 1)<CR>

" Function to handle text capture and script execution
function! PassToLLM(type, ...) abort
    " Save current register and clipboard settings
    let reg_save = @@
    let cb_save = &clipboard
    set clipboard= " Disable clipboard integration temporarily

    try
        " Visual mode handling
        if a:0  " Called from Visual mode
            silent exe 'normal! `' . (a:type ==# 'V' ? "'<" : "`<") . (a:type ==# 'V' ? 'V' : 'v') . "`>y"
        " Operator-pending mode handling
        elseif a:type ==# 'char'
            silent exe 'normal! `[v`]y'
        elseif a:type ==# 'line'
            silent exe 'normal! `[V`]y'
        elseif a:type ==# 'block'
            silent exe 'normal! `[\<C-V>`]y'
        endif

        " Call external script with captured text
        let output = system('~/dotfiles/bin/tgpt-wrapper', @@)
        let output_lines = split(output, "\n", 1)
        let end_line_nr = line("']'")
        call append(end_line_nr, output_lines)
    finally
        " Restore settings
        let @@ = reg_save
        let &clipboard = cb_save
    endtry
endfunction

" move cursor by display line
nnoremap j gj
nnoremap k gk

" fix Y key
nnoremap Y y$
nnoremap gp `[v`]

" watch out for SHIFT key
:command Q q
:command W w
:command QA qall
:command Qa qall
:command Xa xall
:command XA xall

" shortcuts for system clipboard
nnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>y "+y
vnoremap <leader>p "+p


" backspace removes highlight after search
nnoremap <Enter> :noh<CR>
autocmd FileType qf nnoremap <buffer> <Enter> <Enter>

" folding
set foldmethod=indent   
set foldnestmax=10
set nofoldenable
set foldlevel=2
" my snippets
set runtimepath +=~/dotfiles/
autocmd BufRead,BufNewFile */identt/*.py SnipMateLoadScope i2c
autocmd BufRead,BufNewFile */ocr-data-tool/*.py SnipMateLoadScope odt
let g:snipMate = { 'snippet_version' : 1 }

" Use perl compiler for all *.pl and *.pm files.
autocmd BufNewFile,BufRead *.p? compiler perl
autocmd FileType python nnoremap <F5> :w<CR>:!python %<CR>
autocmd FileType ruby nnoremap <F5> :w<CR>:!ruby %<CR>
autocmd FileType sh nnoremap <F5> :w<CR>:!sh %<CR>

" remove trailing whitspaes on file save
fun! RemoveTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,javascript,html,tex,css,htmldjango,typescript,vue,vue.html.javascript.css,typescript.html.javascript.css  autocmd BufWritePre <buffer> :call RemoveTrailingWhitespaces()
autocmd BufRead,BufNewFile *.htm,*.html,*.vue,*.ts,*.js setlocal tabstop=2 shiftwidth=2 softtabstop=2
au BufReadPost *.tex setlocal spell spelllang=pl

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" plugins
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'moll/vim-bbye'
Plugin 'neomake/neomake'
Plugin 'rhysd/devdocs.vim'
Plugin 'vim-scripts/turbo.vim'
Plugin 'bogado/file-line'
Plugin 'jkramer/vim-checkbox'
Plugin 'mhinz/vim-signify'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'kamykn/spelunker.vim'
Plugin 'vimwiki/vimwiki'

Plugin 'samoshkin/vim-mergetool'
:nnoremap <silent> <Leader>mt :MergetoolToggle<CR>

Plugin 'posva/vim-vue'
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
au BufNewFile,BufRead *.uml set filetype=plantuml

" fzf
:nnoremap <silent> <C-p> :GFiles<CR>
:nnoremap <silent> <Leader>/ :Lines<CR>
:nnoremap <silent> gf :FZF -1 --exact --query <C-r><C-f><CR>
:nnoremap <silent> gF :FZF --query <C-r><C-f><CR>

:nnoremap <Leader>k :DevDocsAll 
:nnoremap <Leader>K :DevDocsAllUnderCursor

:nnoremap <leader>r :!bin/python-test % <C-r>=line('.')<CR><CR><CR>
:nnoremap <leader>y :!bin/api_test % <C-r>=line('.')<CR><CR><CR>
:nnoremap <leader>Y :!bin/api_test % <CR><CR><CR>

" keyboard shortcut to close buffer, but preserve window layout
:nnoremap <Leader>Q :Bdelete<CR>
:nnoremap <Leader>q :bd<CR>

:nnoremap <Leader>b :!tig blame % +<C-r>=line('.')<CR><CR>
:nnoremap <Leader>l :!tig %<CR><CR>
:nnoremap <Leader>d Ido_it(lambda: A)
:nnoremap <Leader>s Iawait sync_to_async(f(i)

tnoremap <silent> <C-[><C-[> <C-\><C-n>

" ignored directories 
set wildignore+=*/eggs/*,*/backups/*,*/bin/*,*/bootstrap.py/*,*/build/*,*/buildout.cfg/*,*/develop-eggs/*,*/parts/*,*/logs/*,*/docs/*,*/src/backlog.egg-info/*,*/collected-statics/*,*.pyc
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

let g:polyglot_disabled = ['graphql']

Bundle 'tomtom/tcomment_vim'
Bundle 'vim-scripts/ZoomWin'
Plugin 'danielwe/base16-vim'
Bundle 'wellle/targets.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'bonsaiben/bootstrap-snippets'
Plugin 'vim-scripts/LargeFile'
Plugin 'aklt/plantuml-syntax'


" tmux integration
Plugin 'christoomey/vim-tmux-navigator'
tnoremap <silent> <c-h> <C-W>N:TmuxNavigateLeft<cr>
tnoremap <silent> <c-j> <C-W>N:TmuxNavigateDown<cr>
tnoremap <silent> <c-k> <C-W>N:TmuxNavigateUp<cr>
tnoremap <silent> <c-l> <C-W>N:TmuxNavigateRight<cr>
tnoremap <silent> <c-\> <C-W>N:TmuxNavigatePrevious<cr>

" snipmate
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Plugin 'garbas/vim-snipmate'

" user snippet repository
Bundle "mszacun/vim-snippets"

call vundle#end()            " required
filetype plugin indent on    " required

" colorscheme settings
let base16colorspace=256
colorscheme base16-default-dark
set background=dark

" ctrlp tag fuzzy search
nnoremap <C-t> :Tags<CR>

" aginoodle test running
let g:RunTestCommand = 'bin/tests'

nmap <leader>a :cd $WORKSPACE<CR>

function! s:get_import_path(filepath) abort
  " Get path to file from cwd and without extension.
  let path = fnamemodify(a:filepath, ':.:r')
  " Replace the /'s in the file path with .'s
  let path = substitute(path, 'web\/', '', 'g')
  let path = substitute(path, '\/', '.', 'g')
  let path = substitute(path, '\\', '.', 'g')
  return path
endfunction

function! RunTest(extra_args)
    execute 'wa'
    let l:winview = winsaveview()
    execute '?def test'
    normal 2w
    let l:test_name = expand('<cword>')
    execute '?class '
    normal w
    let l:class_name = expand('<cword>')
    let command = g:RunTestCommand . ' ' . s:get_import_path(expand('%')) . '.' . l:class_name . '.' . l:test_name . ' ' . a:extra_args
    call winrestview(l:winview)
    execute 'nohlsearch'
    execute RunCommand(command)
    call winrestview(l:winview)
endfunction

function! RunTestFile(extra_args)
    execute RunCommand(g:RunTestCommand . ' ' . s:get_import_path(expand('%')) . ' ' . a:extra_args)
endfunction

function! RunCommand(command)
    execute 'wa'
    normal m'
    let executed = 'zsh -ic "' . a:command . '"'
    execute 'terminal ' . l:executed
endfunction

command -nargs=* SingleTest call RunTest(<q-args>)
command -nargs=* FileTest call RunTestFile(<q-args>)

map <leader>T :FileTest<CR>
"map <leader>t :SingleTest<CR>
:nnoremap <leader>t :!bin/tests2 % <C-r>=line('.')<CR><CR><CR>
map <leader>ht :SingleTest<CR>
nmap <leader>u 120\|F,a<CR><ESC>

command MT terminal zsh -ic mt

function! Mixedcase(word)
  return substitute(Camelcase(a:word),'^.','\u&','')
endfunction

function! Camelcase(word)
  let word = substitute(a:word, '-', '_', 'g')
  if word !~# '_' && word =~# '\l'
    return substitute(word,'^.','\l&','')
  else
    return substitute(word,'\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g')
  endif
endfunction

inoremap <expr> <c-x><c-k> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3.. --delimiter ":" --preview-window "+{2}-/2" --preview "/home/szacun/dotfiles/vim/vim/bundle/fzf.vim/bin/preview.sh {}"',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

" CTRL-A CTRL-Q to select all and build quickfix list

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'


if has("patch-8.1.0360")
    set diffopt+=internal,algorithm:patience
endif

let g:vimwiki_table_mappings = 0
let g:vimwiki_global_ext = 0

inoremap <silent> ,f <C-x><C-f>


call neomake#configure#automake('w')
let g:neomake_place_signs = 0
let g:neomake_python_enabled_makers = ['agipylint', 'agiflake']
let g:neomake_python_agipylint_maker = {
        \ 'exe': '/home/szacun/identt/identt2check/bin/pylint',
        \ 'errorformat':
            \ '%A%f:%l:%c:%t: %m,' .
            \ '%A%f:%l: %m,' .
            \ '%A%f:(%l): %m,' .
            \ '%-Z%p^%.%#,' .
            \ '%-G%.%#',
        \ 'output_stream': 'stdout',
        \ 'postprocess': [
        \   function('neomake#postprocess#generic_length'),
        \   function('neomake#makers#ft#python#PylintEntryProcess'),
        \ ]}

let g:neomake_python_agiflake_maker = {
    \ 'exe': '/home/szacun/identt/identt2check/bin/flake8',
    \ 'errorformat':
        \ '%A%f:%l:%c: %t%n %m,' .
        \ '%A%f:%l: %t%n %m,' .
        \ '%-G%.%#',
    \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess'),
    \ 'short_name': 'fl8',
    \ 'output_stream': 'stdout',
    \ 'filter_output': function('neomake#makers#ft#python#FilterPythonWarnings'),
    \ }

" structlog logs
function! StructlogMappings()
    set filetype=json
    nnoremap <leader>r /request_id<CR>2f"l:tab split<CR>:v/<C-r><C-w>/d<CR>
    nnoremap <C-]> :tab split<CR>"zyi":v/<C-r>z/d<CR>
    nnoremap <C-p> :call fzf#vim#buffer_lines('', {'options': ['--preview',  "echo {} \| cut -c 8- \| jq -S 'if .structlog then .structlog else . end' \| bat -l json --color=always --decorations=never"]})<CR>
    nnoremap <leader>l "qyi":!grafana --env ivs-prod01 --query <C-r>q<CR>
    nnoremap <leader>f :%!~/dotfiles/bin/cleanup_loki<CR>
endfunction

autocmd BufRead,BufNewFile *.structlog call StructlogMappings()
autocmd BufRead,BufNewFile *.json call StructlogMappings()

let g:mergetool_layout = 'mr'
let g:mergetool_prefer_revision = 'local'


function! OpenInBrowser(use_current_branch)
  let repo_url = system('git config --get remote.origin.url')
  if v:shell_error
    echo "Not in a git repository!"
    return
  endif
  let repo_url = substitute(repo_url, '\n', '', '')  " Remove newline
  
  let is_github = repo_url =~ 'github.com'
  let is_gitlab = repo_url =~ 'gitlab.com'
  let is_bitbucket = repo_url =~ 'bitbucket.org'

  if !is_github && !is_gitlab && !is_bitbucket
    echo "Unsupported hosting platform!"
    return
  endif

  " Get the current file path relative to the git root
  let git_root = system('git rev-parse --show-toplevel')
  let git_root = substitute(git_root, '\n', '', '')  " Remove newline
  let file_path = expand('%:p')
  let relative_file_path = substitute(file_path, git_root.'/', '', '')

  let line_number = line('.')

  " Normalize repo URL: if it's SSH-based, turn it into an HTTPS URL
  if repo_url =~ '^git@'
    let repo_url = substitute(repo_url, ':', '/', '')
    let repo_url = substitute(repo_url, 'git@', 'https://', '')
  endif
  let repo_url = substitute(repo_url, '.git$', '', '')  " Remove .git suffix

  " Determine the branch to use
  if a:use_current_branch
    let branch = substitute(system('git rev-parse --abbrev-ref HEAD'), '\n', '', '')
  else
    let default_branch = system('git symbolic-ref refs/remotes/origin/HEAD')
    if v:shell_error
      echo "Could not determine default branch!"
      return
    endif
    let branch = substitute(default_branch, 'refs/remotes/origin/', '', '')
    let branch = substitute(branch, '\n', '', '')  " Remove newline
  endif

  " Build the URL based on the hosting platform
  if is_github || is_gitlab
    let full_url = repo_url . '/blob/' . branch . '/' . relative_file_path . '#L' . line_number
  elseif is_bitbucket
    let full_url = repo_url . '/src/' . branch . '/' . relative_file_path . '#lines-' . line_number
  endif
  let full_url = substitute(full_url, '\n', '', '')  " Remove newline
  
  let @+ = full_url
  execute '!firefox ' . shellescape(full_url, 1)
endfunction

" Create a Vim mapping to trigger the function
nnoremap go :call OpenInBrowser(0)<CR>
nnoremap gO :call OpenInBrowser(1)<CR>

vnoremap <silent> <leader>tg :<C-u>'<,'>!tgpt-wrapper<CR>
nnoremap <silent> <leader>tg :execute 'silent !$tgpt-wrapper ' . shellescape(expand('%'))<CR>:edit!<CR>
