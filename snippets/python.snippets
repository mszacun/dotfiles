snippet reverse
	from django.urls import reverse
snippet override_settings
	from django.test import override_settings
snippet factory
	import factory


	class ${1:Model}Factory(factory.DjangoModelFactory):
		class Meta:
			model = $1
snippet cl
	class ${1:`Mixedcase(Filename())`}:
		def __init__(self, ${2:arg}):
			${3:super().__init__()}
			self.$2 = $2
			${0}

snippet su
	def setUp(self):
		super().setUp()

snippet dupa
	print('$' * 80)
	print(f'${1:dupa}')
	print('$' * 80)

snippet sleep
	from time import sleep; sleep(${1:30})
snippet user
	from django.contrib.auth.models import User
snippet command
	from django.core.management.base import BaseCommand


	class Command(BaseCommand):
		help = '${1}'

		def handle(self, *args, **options):
			${2}
snippet kw
	**kwargs${1:,}${0}
snippet at
	self.assertTrue(${1:False})
snippet af
	self.assertFalse(${1})
snippet an
	self.assertIsNone(${1})
snippet ai
	self.assertIn(${1:needle}, ${2:haystack})
snippet ani
	self.assertNotIn(${1:neelde}, ${2:haystack})
snippet ane
	self.assertNotEqual(${2}, ${1})
snippet ann
	self.assertIsNotNone(${1})
snippet ar
	with self.assertRaises(${1:Exception}):
		${2}
snippet aie
	self.assertItemsEqual(${2:actual}, ${1:expected})
snippet ace
	self.assertCountEqual(${2:actual}, ${1:expected})
snippet aii
	self.assertIsInstance(${2:actual}, ${1:expected})
snippet aini
	self.assertIsNotInstance(${2:actual}, ${1:expected})
snippet ..
	self.${1:arg} = $1
snippet shm
	'--disable-dev-shm-usage',
snippet pylint
	# pylint: disable=${1:too-many-arguments}
snippet rdb
	from celery.contrib import rdb; rdb.set_trace()
snippet django
	import django
	django.setup()
snippet admin
	class ${1:Foo}Admin(admin.ModelAdmin):
		list_display = ('${2}',)
		list_filter = (${3})
		search_fields = (${4})
	admin.site.register($1, $1Admin)
snippet view
	from django.http import HttpResponse
	from django.views import View
	from django.contrib.auth.mixins import LoginRequiredMixin

	class ${1}View(LoginRequiredMixin, View):
		def get(self, request):
			return HttpResponse('result')
snippet tview
	from django.views.generic.base import TemplateView
	from django.contrib.auth.mixins import LoginRequiredMixin

	class ${1}View(LoginRequiredMixin, TemplateView):
		template_name = "${2}"

		def get_context_data(self, **kwargs):
			context = super().get_context_data(**kwargs)
			return context
snippet form
	from django import forms

	class ${1}Form(forms.Form):
		your_name = forms.CharField(label='Your name', max_length=100)
snippet mform
	from django.forms import ModelForm

	class ${1:Foo}Form(ModelForm):
		class Meta:
			model = $1
			fields = [${2}]
snippet model
	from django.db import models

	class ${1:User}(models.Model):
		first_name = models.CharField(max_length=30, default='')
		last_name = models.CharField(max_length=30)
		blob = models.TextField()
		age = models.IntegerField()
		is_superuser = models.BooleanField()
		employer = models.ForeignKey('Person', on_delete=models.CASCADE, null=True, blank=True, related_name='employees')
		created_at = models.DateTimeField(auto_now_add=True)
		updated_at = models.DateTimeField(auto_now=True)

		class Meta:
			unique_together = [['first_name', 'last_name']]
snippet choices
	class YearInSchool(models.TextChoices):
			FRESHMAN = 'FR', _('Freshman')
			SOPHOMORE = 'SO', _('Sophomore')
			JUNIOR = 'JR', _('Junior')
			SENIOR = 'SR', _('Senior')
			GRADUATE = 'GR', _('Graduate')
snippet runpython
	class ${1:MyOperation}(migrations.RunPython):
		def __init__(self):
			super().__init__(self.${2:forward}, migrations.RunPython.noop)

		def $2(self, apps, schema_editor):
			${3:Country} = apps.get_model("${4:myapp}", "$3")
snippet mt
	import unittest

	class ${1:`Mixedcase(Filename())`}(unittest.TestCase):
		def setUp(self):
			super().setUp()

		def test_${3}(self):
			${4}


	if __name__ == '__main__':
		unittest.main()
snippet atest
	async def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}
snippet dataclass
	from dataclasses import dataclass, field

	@dataclass
	class ${1:`Mixedcase(Filename())`}:
		name: str
		unit_price: float
		quantity_on_hand: int = 0
		items: list = field(default_factory=list)

		def total_cost(self) -> float:
			return self.unit_price * self.quantity_on_hand
snippet argparse
	import argparse

	parser = argparse.ArgumentParser()
	parser.add_argument('--flagname', action='store_const', dest='dest', const='someconst')
	parser.add_argument('--flagname', default=None)
	parser.add_argument('--flagname', action='store_true', default=True)
	parser.add_argument('items', nargs="?/*/+") # positional arguments

	args = parser.parse_args()
snippet defs
	@staticmethod
	def ${1:mname}(${2:arg}):
		${0}
snippet defc
	@classmethod
	def ${1:mname}(cls, ${2:arg}):
		${0}
snippet defpdb
	def ${1:mname}(self, *args, **kwargs):
		import pdb; pdb.set_trace()
		return super().$1(*args, **kwargs)
snippet ex
	class ${1:name}(Exception):
		pass
snippet contextlib
	from contextlib import contextmanager

	@contextmanager
	def managed_resource(*args, **kwds):
		# Code to acquire resource, e.g.:
		resource = acquire_resource(*args, **kwds)
		try:
			yield resource
		finally:
			# Code to release resource, e.g.:
			release_resource(resource)
snippet acl
	from abc import ABC, abstractmethod

	class ${1:`Mixedcase(Filename())`}(ABC):
		def __init__(self, ${2:arg}):
			${3:super().__init__()}
			self.$2 = $2
			${0}

		@abstractmethod
		def abstract_method(self):
			pass
snippet ddt
	from ddt import data, ddt, unpack

	@ddt
	class ${1:`Mixedcase(Filename())`}(unittest.TestCase):
		@data(
			(example1, example2),
		)
		@unpack
		def test_calculate_liveness_statistics(self, param1, param2):
snippet csvwriter
	import csv
	with open('eggs.csv', 'w') as csvfile:
		csvwriter = csv.writer(csvfile)
		csvwriter.writerow(['columns'])
		csvwriter.writerow(['row1'])
snippet csvreader
	import csv
	with open('names.csv', newline='') as csvfile:
		reader = csv.DictReader(csvfile)
		for row in reader:
			print(row['first_name'], row['last_name'])
snippet regex
	import re

	date_string = "12/1/2023"
	pattern = r"(?P<month>\d{,2})/(?P<day>\d{,2})/(?P<year>\d{2,4})"

	match = re.match(pattern, date_string)

	if match:
		month = match.group("month")
		day = match.group("day")
		year = match.group("year")

		print(f"Day: {day}, Month: {month}, Year: {year}")
