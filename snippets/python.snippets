snippet ici
	from backlog.tests.utils.test_objects_factories import ItemFactory
snippet ci
	${2:self.}item = ItemFactory(${1})
snippet icf
	from backlog.tests.utils.test_objects_factories import FeatureFactory
snippet cf
	${2:self.}feature = FeatureFactory(${1})
snippet ict
	from backlog.tests.utils.test_objects_factories import TeamFactory
snippet ct
	${2:self.}team = TeamFactory(${1})
snippet ics
	from backlog.tests.utils.test_objects_factories import SprintFactory
snippet cs
	${2:self.}current_sprint = SprintFactory(${1})
snippet icu
	from backlog.tests.utils.test_objects_factories import UserFactory
snippet icsu
	from backlog.tests.utils.test_objects_factories import AdminFactory
snippet reverse
	from django.core.urlresolvers import reverse
snippet page
	from django.core.urlresolvers import reverse

	from selenium.webdriver.common.by import By
	from backlog.tests.utils.pages.base_page import Page


	class ${1:`Mixedcase(Filename())`}(${2:Page}):
		def __init__(self, webdriver):
			super($1Page, self).__init__(webdriver)

		def go_to_page(self${3:, }):
			reverse($4)

snippet factory
	class ${1:Model}Factory(factory.DjangoModelFactory):
		class Meta:
			model = $1

snippet mt
	from backlog.tests.utils.module_testcase import ${2:Module}TestCase
	from backlog.tests.utils.test_objects_factories import ${3:Item}Factory


	class ${1:`Mixedcase(Filename())`}($2TestCase):
		def setUp(self):
			super($1, self).setUp()

			self.${4} = $3Factory(${5})

		def test_${6}(self):
			${7}

snippet ft
	from backlog.tests.utils.feature_testcase import FeatureTestCase
	from backlog.tests.utils.pages.${1:base_page} import ${2:Page}


	class ${3:`Mixedcase(Filename())`}(FeatureTestCase):
		def setUp(self):
			super($3, self).setUp()

			self.page = $2(self)

		def test_${4}(self):
			${5}

snippet ut
	from backlog.tests.utils.unit_testcase import UnitTestCase


	class ${1:`Mixedcase(Filename())`}(UnitTestCase):
		def test_${2}(self):
			${3}

snippet cl
	class ${1:`Mixedcase(Filename())`}(${2:object}):
		def __init__(self, ${3:arg}):
			${4:super($1, self).__init__()}
			self.$3 = $3
			${0}

snippet su
	def setUp(self):
		super($1, self).setUp()

snippet dupa
	print '$' * 80
	print '${1:dupa}'
	print '$' * 80

snippet sleep
	from time import sleep; sleep(${1:30})
snippet item
	from backlog.items.models import PBItem
snippet status
	from backlog.items.models import Status
snippet feature
	from backlog.features.models import PBFeature
snippet sprint
	from backlog.sprints.models import Sprint
snippet team
	from backlog.teams.models import Team
snippet user
	from django.contrib.auth.models import User
snippet command
	from django.core.management.base import BaseCommand


	class Command(BaseCommand):
		help = '${1}'

		def handle(self, *args, **options):
			${2}
snippet at
	self.assertTrue(${1})
snippet af
	self.assertFalse(${1})
snippet an
	self.assertIsNone(${1})
snippet ai
	self.assertIn(${1:needle}, ${2:haystack})
snippet ani
	self.assertNotIn(${1:neelde}, ${2:haystack})
snippet ane
	self.assertNotEqual(${2}, ${1})
snippet ann
	self.assertIsNotNone(${1})
snippet ar
	with self.assertRaises(${1:Exception}):
		${2}
snippet aie
	self.assertItemsEqual(${2:actual}, ${1:expected})

snippet ..
	self.${1:arg} = $1
snippet shm
	'--disable-dev-shm-usage',
