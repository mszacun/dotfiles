snippet icu
	from identt2check.users.factories import UserFactory
snippet icd
	from identt2check.documentocr.factories import POL_BO_02003_Full
snippet icbc
	from identt2check.verification.factories import BusinessCustomerFactory
snippet cd
	${2:self.}document = POL_BO_02003_Full(${1})
snippet factory
	import factory

	from identt2check.testing.factories.base import AsyncCapableFactory

	class ${1:`Mixedcase(Filename())`}Factory(AsyncCapableFactory):
		class Meta:
			model = $1

		name = factory.Sequence(lambda n: f"Group {n}")
		business_customer = factory.SubFactory(BusinessCustomerFactory)
		name = factory.Faker('slug')
snippet ut
	from unittest import TestCase


	class ${1:`Mixedcase(Filename())`}(TestCase):
		def setUp(self):
			super().setUp()

		def test_${3}(self):
			${4}
snippet mt
	from identt2check.testing.testcases import TestCase


	class ${1:`Mixedcase(Filename())`}(TestCase):
		def setUp(self):
			super().setUp()

		def test_${3}(self):
			${4}
snippet amt
	from identt2check.testing.testcases import APITestCase


	class ${1:`Mixedcase(Filename())`}(APITestCase):
		def setUp(self):
			super().setUp()

		def test_${3}(self):
			${4}

snippet admin
	from identt2check.admin_utils import Identt2checkAdmin


	class ${1:Foo}Admin(Identt2checkAdmin):
		list_display = ('${2}',)
		list_filter = (${3})
		search_fields = (${4})
	admin.site.register(models.$1, $1Admin)
snippet glog
	import structlog
	logger = structlog.getLogger('base')
snippet le
	logger.error(${0:msg})
snippet lg
	logger.debug(${0:msg})
snippet lw
	logger.warning(${0:msg})
snippet lc
	logger.critical(${0:msg})
snippet li
	logger.info(${0:msg})
snippet lex
	logger.exception('${0:msg}', exception_handled=True)
snippet inline
	from identt2check.admin_utils import Identt2checkAdmin, Identt2checkStackedInline


	class ${1:Foo}Inline(Identt2checkStackedInline):
		model = models.$1
		extra = 0
snippet condition
	class ${1:Name}(Condition):
		def is_satisfied(self, *args, **kwargs):
			${2}
snippet docstring
	"""
	${1:The function returns adjusted expiry date. Usually the expiry date of a document}

	Parameters
	----------
	expiry_date : date
		Expiration `date` to be adjusted.

	**kwargs
		Optional args.

	Returns
	-------
	Date
		Adjusted expiration date
	"""
snippet extra_params
	class ExtraParams(NamedTuple):
		${1:name}
snippet verifier
	from identt2check.verification.document_verification import class_based_results
	from identt2check.verification.document_verification.verifiers.verifier import Verifier


	class HologramsUnknownExtraParams(NamedTuple):
		reason: str = result_param(docs="Reason, why unknown result is set")

	class ${1:Name}(Verifier):
		name = "identifier"
		verbose_name = _("verbose name")
		group = OtherGroup
		description = (
			"description"
		)
		preconditions = (
			HasOneOfGivenTypes(("POL-BO",)),
		)

		class ResultClass(class_based_results.OkFailUnknownResult):
			OK = class_based_results.VerifierStatus(message=_("message1"), documentation="")
			FAIL = class_based_results.VerifierStatus(message=_("message2"), documentation="")
			UNKNOWN = class_based_results.VerifierStatus(
				message=_("message3"),
				documentation="",
				is_failing=True,
				parameters=HologramsUnknownExtraParams,
			)

		async def verify(self) -> None:
			pass
snippet rdb
	from remote_pdb import RemotePdb
	RemotePdb('0.0.0.0', 12345).set_trace()
snippet toolong
	# noqa: E501
snippet env
	${1:ENV} = os.getenv("$1", "${2:DEFAULT}") 
