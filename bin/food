#!/usr/bin/env ruby

require 'optparse'
require 'date'

options = {}

def normalize_food_line(meal_entry, meal_type)
  meal_entry = meal_entry.index(meal_type) ? meal_entry[meal_entry.index(meal_type) + meal_type.size...] : meal_entry
  return meal_entry.downcase
end

def print_food_line(line)
  begin
    occurence_date_str, *rest = line.split
    joined_rest = rest.join(' ')
    days_since_occurence = (Date.today() - Date.parse(occurence_date_str)).to_i
    puts "#{occurence_date_str} #{joined_rest} (#{days_since_occurence} days ago)"
  rescue
  end
end

def find_last_meals(meal_type)
  all_meals = `khal search #{meal_type} --format "{start-date} - {title}"`
  last_meal_occurences = all_meals.lines.reverse.uniq { |line| normalize_food_line(line, meal_type)}
  last_meal_occurences.each { |line| print_food_line(line) }
end

def register_new_meal_occurence(meal_type, dish, hour, ago)
  occurence_date = (Date.today() - ago).strftime('%d/%m/%Y')
  command = ['khal', 'new', '-a', 'Jedzenie', occurence_date, hour, "[#{meal_type}] " + dish]
  system(command.join(' '))
end

OptionParser.new do |opts|
  opts.on('-tTYPE', 'Meal type') { |t| options[:meal_type] = t }
  opts.on('-d', '--dish [DISH]' 'Dish') { |d| options[:dish] = d }
  opts.on('-hHOUR', 'Hour') { |h| options[:hour] = h }
  opts.on('-a', '--ago [AGO]' 'Ago') { |a| options[:ago] = a.to_i }
end.parse!

if options.fetch(:dish, nil)
  register_new_meal_occurence(options[:meal_type], options[:dish], options[:hour], options.fetch(:ago, 0))
else
  find_last_meals(options[:meal_type])
end
